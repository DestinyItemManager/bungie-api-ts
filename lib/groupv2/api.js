"use strict";
/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.3.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bugie-api-ts
 * Do not edit these files manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/** Returns a list of all available group avatars for the signed-in user. */
function getAvailableAvatars(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableAvatars/'
    });
}
exports.getAvailableAvatars = getAvailableAvatars;
/** Returns a list of all available group themes. */
function getAvailableThemes(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableThemes/'
    });
}
exports.getAvailableThemes = getAvailableThemes;
/**
 * Gets the state of the user's clan invite preferences for a particular membership
 * type - true if they wish to be invited to clans, false otherwise.
 */
function getUserClanInviteSetting(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/GetUserClanInviteSetting/" + params.mType + "/"
    });
}
exports.getUserClanInviteSetting = getUserClanInviteSetting;
/**
 * Sets the state of the user's clan invite preferences - true if they wish to be
 * invited to clans, false otherwise.
 */
function setUserClanInviteSetting(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/SetUserClanInviteSetting/" + params.mType + "/" + params.allowInvites + "/"
    });
}
exports.setUserClanInviteSetting = setUserClanInviteSetting;
/**
 * Gets groups recommended for you based on the groups to whom those you follow
 * belong.
 */
function getRecommendedGroups(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/Recommended/" + params.groupType + "/" + params.createDateRange + "/"
    });
}
exports.getRecommendedGroups = getRecommendedGroups;
/** Search for Groups. */
function groupSearch(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/GroupV2/Search/',
        body: body
    });
}
exports.groupSearch = groupSearch;
/** Get information about a specific group of the given ID. */
function getGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/"
    });
}
exports.getGroup = getGroup;
/** Get information about a specific group with the given name and type. */
function getGroupByName(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/Name/" + params.groupName + "/" + params.groupType + "/"
    });
}
exports.getGroupByName = getGroupByName;
/** Gets a list of available optional conversation channels and their settings. */
function getGroupOptionalConversations(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/OptionalConversations/"
    });
}
exports.getGroupOptionalConversations = getGroupOptionalConversations;
/** Create a new group. */
function createGroup(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/GroupV2/Create/',
        body: body
    });
}
exports.createGroup = createGroup;
/**
 * Edit an existing group. You must have suitable permissions in the group to
 * perform this operation. This latest revision will only edit the fields you pass
 * in - pass null for properties you want to leave unaltered.
 */
function editGroup(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Edit/",
        body: body
    });
}
exports.editGroup = editGroup;
/**
 * Edit an existing group's clan banner. You must have suitable permissions in the
 * group to perform this operation. All fields are required.
 */
function editClanBanner(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/EditClanBanner/",
        body: body
    });
}
exports.editClanBanner = editClanBanner;
/**
 * Edit group options only available to a founder. You must have suitable
 * permissions in the group to perform this operation.
 */
function editFounderOptions(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/EditFounderOptions/",
        body: body
    });
}
exports.editFounderOptions = editFounderOptions;
/**
 * Add a new optional conversation/chat channel. Requires admin permissions to the
 * group.
 */
function addOptionalConversation(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/OptionalConversations/Add/",
        body: body
    });
}
exports.addOptionalConversation = addOptionalConversation;
/**
 * Edit the settings of an optional conversation/chat channel. Requires admin
 * permissions to the group.
 */
function editOptionalConversation(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/OptionalConversations/Edit/" + params.conversationId + "/",
        body: body
    });
}
exports.editOptionalConversation = editOptionalConversation;
/** Get the list of members in a given group. */
function getMembersOfGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/",
        params: {
            memberType: params.memberType,
            nameSearch: params.nameSearch
        }
    });
}
exports.getMembersOfGroup = getMembersOfGroup;
/** Get the list of members in a given group who are of admin level or higher. */
function getAdminsAndFounderOfGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/AdminsAndFounder/"
    });
}
exports.getAdminsAndFounderOfGroup = getAdminsAndFounderOfGroup;
/**
 * Edit the membership type of a given member. You must have suitable permissions
 * in the group to perform this operation.
 */
function editGroupMembership(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/SetMembershipType/" + params.memberType + "/"
    });
}
exports.editGroupMembership = editGroupMembership;
/**
 * Kick a member from the given group, forcing them to reapply if they wish to re-
 * join the group. You must have suitable permissions in the group to perform this
 * operation.
 */
function kickMember(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/Kick/"
    });
}
exports.kickMember = kickMember;
/**
 * Bans the requested member from the requested group for the specified period of
 * time.
 */
function banMember(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/Ban/",
        body: body
    });
}
exports.banMember = banMember;
/** Unbans the requested member, allowing them to re-apply for membership. */
function unbanMember(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/Unban/"
    });
}
exports.unbanMember = unbanMember;
/**
 * Get the list of banned members in a given group. Only accessible to group Admins
 * and above. Not applicable to all groups. Check group features.
 */
function getBannedMembersOfGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Banned/"
    });
}
exports.getBannedMembersOfGroup = getBannedMembersOfGroup;
/**
 * An administrative method to allow the founder of a group or clan to give up
 * their position to another admin permanently.
 */
function abdicateFoundership(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Admin/AbdicateFoundership/" + params.membershipType + "/" + params.founderIdNew + "/"
    });
}
exports.abdicateFoundership = abdicateFoundership;
/** Request permission to join the given group. */
function requestGroupMembership(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/Apply/" + params.membershipType + "/",
        body: body
    });
}
exports.requestGroupMembership = requestGroupMembership;
/**
 * Get the list of users who are awaiting a decision on their application to join a
 * given group. Modified to include application info.
 */
function getPendingMemberships(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/Pending/"
    });
}
exports.getPendingMemberships = getPendingMemberships;
/** Get the list of users who have been invited into the group. */
function getInvitedIndividuals(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/InvitedIndividuals/"
    });
}
exports.getInvitedIndividuals = getInvitedIndividuals;
/**
 * Rescind your application to join the given group or leave the group if you are
 * already a member..
 */
function rescindGroupMembership(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/Rescind/" + params.membershipType + "/"
    });
}
exports.rescindGroupMembership = rescindGroupMembership;
/** Approve all of the pending users for the given group. */
function approveAllPending(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/ApproveAll/",
        body: body
    });
}
exports.approveAllPending = approveAllPending;
/** Deny all of the pending users for the given group. */
function denyAllPending(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/DenyAll/",
        body: body
    });
}
exports.denyAllPending = denyAllPending;
/** Approve all of the pending users for the given group. */
function approvePendingForList(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/ApproveList/",
        body: body
    });
}
exports.approvePendingForList = approvePendingForList;
/**
 * Approve the given membershipId to join the group/clan as long as they have
 * applied.
 */
function approvePending(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/Approve/" + params.membershipType + "/" + params.membershipId + "/",
        body: body
    });
}
exports.approvePending = approvePending;
/** Deny all of the pending users for the given group that match the passed-in . */
function denyPendingForList(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/DenyList/",
        body: body
    });
}
exports.denyPendingForList = denyPendingForList;
/** Get information about the groups that a given member has joined. */
function getGroupsForMember(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/User/" + params.membershipType + "/" + params.membershipId + "/" + params.filter + "/" + params.groupType + "/"
    });
}
exports.getGroupsForMember = getGroupsForMember;
/**
 * Get information about the groups that a given member has applied to or been
 * invited to.
 */
function getPotentialGroupsForMember(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/User/Potential/" + params.membershipType + "/" + params.membershipId + "/" + params.filter + "/" + params.groupType + "/"
    });
}
exports.getPotentialGroupsForMember = getPotentialGroupsForMember;
/** Invite a user to join this group. */
function individualGroupInvite(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/IndividualInvite/" + params.membershipType + "/" + params.membershipId + "/",
        body: body
    });
}
exports.individualGroupInvite = individualGroupInvite;
/** Cancels a pending invitation to join a group. */
function individualGroupInviteCancel(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/IndividualInviteCancel/" + params.membershipType + "/" + params.membershipId + "/"
    });
}
exports.individualGroupInviteCancel = individualGroupInviteCancel;
