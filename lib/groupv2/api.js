/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.8.0
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bungie-api-ts
 * Do not edit these files manually.
 */
/** Returns a list of all available group avatars for the signed-in user. */
export function getAvailableAvatars(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableAvatars/'
    });
}
/** Returns a list of all available group themes. */
export function getAvailableThemes(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableThemes/'
    });
}
/**
 * Gets the state of the user's clan invite preferences for a particular membership
 * type - true if they wish to be invited to clans, false otherwise.
 */
export function getUserClanInviteSetting(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/GetUserClanInviteSetting/" + params.mType + "/"
    });
}
/**
 * Gets groups recommended for you based on the groups to whom those you follow
 * belong.
 */
export function getRecommendedGroups(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/Recommended/" + params.groupType + "/" + params.createDateRange + "/"
    });
}
/** Search for Groups. */
export function groupSearch(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/GroupV2/Search/',
        body: body
    });
}
/** Get information about a specific group of the given ID. */
export function getGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/"
    });
}
/** Get information about a specific group with the given name and type. */
export function getGroupByName(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/Name/" + params.groupName + "/" + params.groupType + "/"
    });
}
/**
 * Get information about a specific group with the given name and type. The POST
 * version.
 */
export function getGroupByNameV2(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/GroupV2/NameV2/',
        body: body
    });
}
/** Gets a list of available optional conversation channels and their settings. */
export function getGroupOptionalConversations(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/OptionalConversations/"
    });
}
/**
 * Edit an existing group. You must have suitable permissions in the group to
 * perform this operation. This latest revision will only edit the fields you pass
 * in - pass null for properties you want to leave unaltered.
 */
export function editGroup(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Edit/",
        body: body
    });
}
/**
 * Edit an existing group's clan banner. You must have suitable permissions in the
 * group to perform this operation. All fields are required.
 */
export function editClanBanner(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/EditClanBanner/",
        body: body
    });
}
/**
 * Edit group options only available to a founder. You must have suitable
 * permissions in the group to perform this operation.
 */
export function editFounderOptions(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/EditFounderOptions/",
        body: body
    });
}
/**
 * Add a new optional conversation/chat channel. Requires admin permissions to the
 * group.
 */
export function addOptionalConversation(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/OptionalConversations/Add/",
        body: body
    });
}
/**
 * Edit the settings of an optional conversation/chat channel. Requires admin
 * permissions to the group.
 */
export function editOptionalConversation(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/OptionalConversations/Edit/" + params.conversationId + "/",
        body: body
    });
}
/** Get the list of members in a given group. */
export function getMembersOfGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/",
        params: {
            memberType: params.memberType,
            nameSearch: params.nameSearch
        }
    });
}
/** Get the list of members in a given group who are of admin level or higher. */
export function getAdminsAndFounderOfGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/AdminsAndFounder/"
    });
}
/**
 * Edit the membership type of a given member. You must have suitable permissions
 * in the group to perform this operation.
 */
export function editGroupMembership(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/SetMembershipType/" + params.memberType + "/"
    });
}
/**
 * Kick a member from the given group, forcing them to reapply if they wish to re-
 * join the group. You must have suitable permissions in the group to perform this
 * operation.
 */
export function kickMember(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/Kick/"
    });
}
/**
 * Bans the requested member from the requested group for the specified period of
 * time.
 */
export function banMember(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/Ban/",
        body: body
    });
}
/** Unbans the requested member, allowing them to re-apply for membership. */
export function unbanMember(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/" + params.membershipType + "/" + params.membershipId + "/Unban/"
    });
}
/**
 * Get the list of banned members in a given group. Only accessible to group Admins
 * and above. Not applicable to all groups. Check group features.
 */
export function getBannedMembersOfGroup(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Banned/"
    });
}
/**
 * An administrative method to allow the founder of a group or clan to give up
 * their position to another admin permanently.
 */
export function abdicateFoundership(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Admin/AbdicateFoundership/" + params.membershipType + "/" + params.founderIdNew + "/"
    });
}
/**
 * Get the list of users who are awaiting a decision on their application to join a
 * given group. Modified to include application info.
 */
export function getPendingMemberships(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/Pending/"
    });
}
/** Get the list of users who have been invited into the group. */
export function getInvitedIndividuals(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/InvitedIndividuals/"
    });
}
/** Approve all of the pending users for the given group. */
export function approveAllPending(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/ApproveAll/",
        body: body
    });
}
/** Deny all of the pending users for the given group. */
export function denyAllPending(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/DenyAll/",
        body: body
    });
}
/** Approve all of the pending users for the given group. */
export function approvePendingForList(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/ApproveList/",
        body: body
    });
}
/**
 * Approve the given membershipId to join the group/clan as long as they have
 * applied.
 */
export function approvePending(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/Approve/" + params.membershipType + "/" + params.membershipId + "/",
        body: body
    });
}
/** Deny all of the pending users for the given group that match the passed-in . */
export function denyPendingForList(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/DenyList/",
        body: body
    });
}
/** Get information about the groups that a given member has joined. */
export function getGroupsForMember(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/User/" + params.membershipType + "/" + params.membershipId + "/" + params.filter + "/" + params.groupType + "/"
    });
}
/**
 * Allows a founder to manually recover a group they can see in game but not on
 * bungie.net
 */
export function recoverGroupForFounder(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/Recover/" + params.membershipType + "/" + params.membershipId + "/" + params.groupType + "/"
    });
}
/**
 * Get information about the groups that a given member has applied to or been
 * invited to.
 */
export function getPotentialGroupsForMember(http, params) {
    return http({
        method: 'GET',
        url: "https://www.bungie.net/Platform/GroupV2/User/Potential/" + params.membershipType + "/" + params.membershipId + "/" + params.filter + "/" + params.groupType + "/"
    });
}
/** Invite a user to join this group. */
export function individualGroupInvite(http, params, body) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/IndividualInvite/" + params.membershipType + "/" + params.membershipId + "/",
        body: body
    });
}
/** Cancels a pending invitation to join a group. */
export function individualGroupInviteCancel(http, params) {
    return http({
        method: 'POST',
        url: "https://www.bungie.net/Platform/GroupV2/" + params.groupId + "/Members/IndividualInviteCancel/" + params.membershipType + "/" + params.membershipId + "/"
    });
}
