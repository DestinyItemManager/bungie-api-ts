import {
  getDestinyManifest,
  getDestinyEntityDefinition,
  searchDestinyPlayer,
  getLinkedProfiles,
  getProfile,
  getCharacter,
  getClanWeeklyRewardState,
  getItem,
  getVendors,
  getVendor,
  getPublicVendors,
  getCollectibleNodeDetails,
  transferItem,
  pullFromPostmaster,
  equipItem,
  equipItems,
  setItemLockState,
  setQuestTrackedState,
  insertSocketPlug,
  getPostGameCarnageReport,
  reportOffensivePostGameCarnageReportPlayer,
  getHistoricalStatsDefinition,
  getClanLeaderboards,
  getClanAggregateStats,
  getLeaderboards,
  getLeaderboardsForCharacter,
  searchDestinyEntities,
  getHistoricalStats,
  getHistoricalStatsForAccount,
  getActivityHistory,
  getUniqueWeaponHistory,
  getDestinyAggregateActivityStats,
  getPublicMilestoneContent,
  getPublicMilestones,
  awaInitializeRequest,
  awaProvideAuthorizationResult,
  awaGetActionToken,
} from '../generated-src/destiny2/api';
import { getDestinyManifestSlice } from '../generated-src/destiny2/manifest';
import { HttpClient, HttpClientConfig } from '../generated-src/http';
import { DestinyComponentType } from '../generated-src/destiny2/interfaces';
import fetch from 'node-fetch';

// instead of actually performing a fetch,
// this fake HttpClient returns the HttpConfig it would have used to make the fetch
// so we can check of the HttpConfig was built right
const h = ((httpConfig?: any) => Promise.resolve(httpConfig)) as HttpClient;

// sample values for the "body" argument
const b = {} as any;

// sample values for parameters
const p = {
  characterId: '1234658790',
  components: [
    DestinyComponentType.Vendors,
    DestinyComponentType.VendorSales,
    DestinyComponentType.ItemInstances,
    DestinyComponentType.ItemObjectives,
    DestinyComponentType.ItemStats,
    DestinyComponentType.ItemSockets,
    DestinyComponentType.ItemTalentGrids,
    DestinyComponentType.ItemCommonData,
    DestinyComponentType.CurrencyLookups,
    DestinyComponentType.ItemPlugStates,
    DestinyComponentType.ItemReusablePlugs,
    DestinyComponentType.ItemPlugObjectives,
  ],
  destinyMembershipId: '123456',
  getAllMemberships: true,
  itemId: '0987654321',
  itemInstanceId: '0987654321',
  itemReferenceHash: 45674576,
  membershipId: '123456',
  membershipType: 3,
  stackSize: 7,
  transferToVault: true,
  vendorHash: 45674576,
  state: true,
  groupId: '78346592834756',
  correlationId: '456734563673',
  count: 10,
  mode: 5,
  modes: [5, 7],
  page: 2,
  maxtop: 6,
  statid: '234624564',
  returnOriginalProfile: true,
  displayName: 'asdf',
  entityType: 'DestinyInventoryItemDefinition',
  hashIdentifier: 23463456,
  dayend: 'YYYY-MM-DD',
  daystart: 'YYYY-MM-DD',
  groups: ['General', 'Weapons'],
  periodType: 'AllTime',
  milestoneHash: 23546789,
  collectiblePresentationNodeHash: 10293847,
  activityId: '456745673456',
  filter: 0,
  type: 'DestinyInventoryItemDefinition',
  searchTerm: 'something',
};

const testCases: [(..._: any) => any, any[]][] = [
  [getDestinyManifest, [h]],
  [getDestinyEntityDefinition, [h, p]],
  [searchDestinyPlayer, [h, p]],
  [getLinkedProfiles, [h, p]],
  [getProfile, [h, p]],
  [getCharacter, [h, p]],
  [getClanWeeklyRewardState, [h, p]],
  [getItem, [h, p]],
  [getVendors, [h, p]],
  [getVendor, [h, p]],
  [getPublicVendors, [h, p]],
  [getCollectibleNodeDetails, [h, p]],
  [transferItem, [h, b]],
  [pullFromPostmaster, [h, b]],
  [equipItem, [h, b]],
  [equipItems, [h, b]],
  [setItemLockState, [h, b]],
  [setQuestTrackedState, [h, b]],
  [insertSocketPlug, [h, b]],
  [getPostGameCarnageReport, [h, p]],
  [reportOffensivePostGameCarnageReportPlayer, [h, p, b]],
  [getHistoricalStatsDefinition, [h]],
  [getClanLeaderboards, [h, p]],
  [getClanAggregateStats, [h, p]],
  [getLeaderboards, [h, p]],
  [getLeaderboardsForCharacter, [h, p]],
  [searchDestinyEntities, [h, p]],
  [getHistoricalStats, [h, p]],
  [getHistoricalStatsForAccount, [h, p]],
  [getActivityHistory, [h, p]],
  [getUniqueWeaponHistory, [h, p]],
  [getDestinyAggregateActivityStats, [h, p]],
  [getPublicMilestoneContent, [h, p]],
  [getPublicMilestones, [h]],
  [awaInitializeRequest, [h, b]],
  [awaProvideAuthorizationResult, [h, b]],
  [awaGetActionToken, [h, p]],
];

test.each(testCases)('check config builder for %p', async (func, args) => {
  expect(await func(...args)).toMatchSnapshot();
});
