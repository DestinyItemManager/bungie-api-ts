/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.8.2
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bungie-api-ts
 * Do not edit these files manually.
 */

import { HttpClient } from '../http';

import {
  ContentItemPublicContract,
  ContentTypeDescription,
  SearchResultOfContentItemPublicContract
} from './interfaces.js';
import {
  ServerResponse
} from '../common.js';

export interface GetContentTypeParams {
  type: string;
}

/** Gets an object describing a particular variant of content. */
export function getContentType(http: HttpClient, { type }: GetContentTypeParams): Promise<ServerResponse<ContentTypeDescription>> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/Content/GetContentType/${type}/`
  });
}

export interface GetContentByIdParams {
  /** false */
  head?: boolean;
  id: string;
  locale: string;
}

/** Returns a content item referenced by id */
export function getContentById(http: HttpClient, { id, locale, ...params }: GetContentByIdParams): Promise<ServerResponse<ContentItemPublicContract>> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/Content/GetContentById/${id}/${locale}/`,
    params
  });
}

export interface GetContentByTagAndTypeParams {
  /** Not used. */
  head?: boolean;
  locale: string;
  tag: string;
  type: string;
}

/** Returns the newest item that matches a given tag and Content Type. */
export function getContentByTagAndType(http: HttpClient, { locale, tag, type, ...params }: GetContentByTagAndTypeParams): Promise<ServerResponse<ContentItemPublicContract>> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/Content/GetContentByTagAndType/${tag}/${type}/${locale}/`,
    params
  });
}

export interface SearchContentWithTextParams {
  /** Content type tag: Help, News, etc. Supply multiple ctypes separated by space. */
  ctype?: string;
  /** Page number for the search results, starting with page 1. */
  currentpage?: number;
  /** Not used. */
  head?: boolean;
  locale: string;
  /** Word or phrase for the search. */
  searchtext?: string;
  /** For analytics, hint at the part of the app that triggered the search. Optional. */
  source?: string;
  /** Tag used on the content to be searched. */
  tag?: string;
}

/**
 * Gets content based on querystring information passed in. Provides basic search
 * and text search capabilities.
 */
export function searchContentWithText(http: HttpClient, { locale, ...params }: SearchContentWithTextParams): Promise<ServerResponse<SearchResultOfContentItemPublicContract>> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/Content/Search/${locale}/`,
    params
  });
}

export interface SearchContentByTagAndTypeParams {
  /** Page number for the search results starting with page 1. */
  currentpage?: number;
  /** Not used. */
  head?: boolean;
  /** Not used. */
  itemsperpage?: number;
  locale: string;
  tag: string;
  type: string;
}

/** Searches for Content Items that match the given Tag and Content Type. */
export function searchContentByTagAndType(http: HttpClient, { locale, tag, type, ...params }: SearchContentByTagAndTypeParams): Promise<ServerResponse<SearchResultOfContentItemPublicContract>> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/Content/SearchContentByTagAndType/${tag}/${type}/${locale}/`,
    params
  });
}

export interface SearchHelpArticlesParams {
  searchtext: string;
  size: string;
}

/** Search for Help Articles. */
export function searchHelpArticles(http: HttpClient, { searchtext, size }: SearchHelpArticlesParams): Promise<ServerResponse<object>> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/Content/SearchHelpArticles/${searchtext}/${size}/`
  });
}
